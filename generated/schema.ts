// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class EmissionsERC20Factory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EmissionsERC20Factory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EmissionsERC20Factory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EmissionsERC20Factory", id.toString(), this);
    }
  }

  static load(id: string): EmissionsERC20Factory | null {
    return changetype<EmissionsERC20Factory | null>(
      store.get("EmissionsERC20Factory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get implementation(): Bytes {
    let value = this.get("implementation");
    return value!.toBytes();
  }

  set implementation(value: Bytes) {
    this.set("implementation", Value.fromBytes(value));
  }

  get childrenCount(): BigInt {
    let value = this.get("childrenCount");
    return value!.toBigInt();
  }

  set childrenCount(value: BigInt) {
    this.set("childrenCount", Value.fromBigInt(value));
  }

  get children(): Array<string> | null {
    let value = this.get("children");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set children(value: Array<string> | null) {
    if (!value) {
      this.unset("children");
    } else {
      this.set("children", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class EmissionsERC20 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EmissionsERC20 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EmissionsERC20 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EmissionsERC20", id.toString(), this);
    }
  }

  static load(id: string): EmissionsERC20 | null {
    return changetype<EmissionsERC20 | null>(store.get("EmissionsERC20", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value!.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get deployTimestamp(): BigInt {
    let value = this.get("deployTimestamp");
    return value!.toBigInt();
  }

  set deployTimestamp(value: BigInt) {
    this.set("deployTimestamp", Value.fromBigInt(value));
  }

  get deployBlock(): BigInt {
    let value = this.get("deployBlock");
    return value!.toBigInt();
  }

  set deployBlock(value: BigInt) {
    this.set("deployBlock", Value.fromBigInt(value));
  }

  get deployer(): Bytes {
    let value = this.get("deployer");
    return value!.toBytes();
  }

  set deployer(value: Bytes) {
    this.set("deployer", Value.fromBytes(value));
  }
}

export class SaleFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SaleFactory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SaleFactory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SaleFactory", id.toString(), this);
    }
  }

  static load(id: string): SaleFactory | null {
    return changetype<SaleFactory | null>(store.get("SaleFactory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get implementation(): Bytes {
    let value = this.get("implementation");
    return value!.toBytes();
  }

  set implementation(value: Bytes) {
    this.set("implementation", Value.fromBytes(value));
  }

  get childrenCount(): BigInt {
    let value = this.get("childrenCount");
    return value!.toBigInt();
  }

  set childrenCount(value: BigInt) {
    this.set("childrenCount", Value.fromBigInt(value));
  }

  get children(): Array<string> | null {
    let value = this.get("children");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set children(value: Array<string> | null) {
    if (!value) {
      this.unset("children");
    } else {
      this.set("children", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Sale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Sale entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Sale must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Sale", id.toString(), this);
    }
  }

  static load(id: string): Sale | null {
    return changetype<Sale | null>(store.get("Sale", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value!.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get deployTimestamp(): BigInt {
    let value = this.get("deployTimestamp");
    return value!.toBigInt();
  }

  set deployTimestamp(value: BigInt) {
    this.set("deployTimestamp", Value.fromBigInt(value));
  }

  get deployBlock(): BigInt {
    let value = this.get("deployBlock");
    return value!.toBigInt();
  }

  set deployBlock(value: BigInt) {
    this.set("deployBlock", Value.fromBigInt(value));
  }

  get deployer(): Bytes {
    let value = this.get("deployer");
    return value!.toBytes();
  }

  set deployer(value: Bytes) {
    this.set("deployer", Value.fromBytes(value));
  }
}

export class VerifyFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VerifyFactory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VerifyFactory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VerifyFactory", id.toString(), this);
    }
  }

  static load(id: string): VerifyFactory | null {
    return changetype<VerifyFactory | null>(store.get("VerifyFactory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get implementation(): Bytes {
    let value = this.get("implementation");
    return value!.toBytes();
  }

  set implementation(value: Bytes) {
    this.set("implementation", Value.fromBytes(value));
  }

  get childrenCount(): BigInt {
    let value = this.get("childrenCount");
    return value!.toBigInt();
  }

  set childrenCount(value: BigInt) {
    this.set("childrenCount", Value.fromBigInt(value));
  }

  get children(): Array<string> | null {
    let value = this.get("children");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set children(value: Array<string> | null) {
    if (!value) {
      this.unset("children");
    } else {
      this.set("children", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Verify extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Verify entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Verify must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Verify", id.toString(), this);
    }
  }

  static load(id: string): Verify | null {
    return changetype<Verify | null>(store.get("Verify", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value!.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get deployTimestamp(): BigInt {
    let value = this.get("deployTimestamp");
    return value!.toBigInt();
  }

  set deployTimestamp(value: BigInt) {
    this.set("deployTimestamp", Value.fromBigInt(value));
  }

  get deployBlock(): BigInt {
    let value = this.get("deployBlock");
    return value!.toBigInt();
  }

  set deployBlock(value: BigInt) {
    this.set("deployBlock", Value.fromBigInt(value));
  }

  get deployer(): Bytes {
    let value = this.get("deployer");
    return value!.toBytes();
  }

  set deployer(value: Bytes) {
    this.set("deployer", Value.fromBytes(value));
  }
}

export class VerifyTierFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VerifyTierFactory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VerifyTierFactory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VerifyTierFactory", id.toString(), this);
    }
  }

  static load(id: string): VerifyTierFactory | null {
    return changetype<VerifyTierFactory | null>(
      store.get("VerifyTierFactory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get implementation(): Bytes {
    let value = this.get("implementation");
    return value!.toBytes();
  }

  set implementation(value: Bytes) {
    this.set("implementation", Value.fromBytes(value));
  }

  get childrenCount(): BigInt {
    let value = this.get("childrenCount");
    return value!.toBigInt();
  }

  set childrenCount(value: BigInt) {
    this.set("childrenCount", Value.fromBigInt(value));
  }

  get children(): Array<string> | null {
    let value = this.get("children");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set children(value: Array<string> | null) {
    if (!value) {
      this.unset("children");
    } else {
      this.set("children", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class VerifyTier extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VerifyTier entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VerifyTier must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VerifyTier", id.toString(), this);
    }
  }

  static load(id: string): VerifyTier | null {
    return changetype<VerifyTier | null>(store.get("VerifyTier", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value!.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get deployTimestamp(): BigInt {
    let value = this.get("deployTimestamp");
    return value!.toBigInt();
  }

  set deployTimestamp(value: BigInt) {
    this.set("deployTimestamp", Value.fromBigInt(value));
  }

  get deployBlock(): BigInt {
    let value = this.get("deployBlock");
    return value!.toBigInt();
  }

  set deployBlock(value: BigInt) {
    this.set("deployBlock", Value.fromBigInt(value));
  }

  get deployer(): Bytes {
    let value = this.get("deployer");
    return value!.toBytes();
  }

  set deployer(value: Bytes) {
    this.set("deployer", Value.fromBytes(value));
  }
}

export class ERC20BalanceTierFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC20BalanceTierFactory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20BalanceTierFactory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20BalanceTierFactory", id.toString(), this);
    }
  }

  static load(id: string): ERC20BalanceTierFactory | null {
    return changetype<ERC20BalanceTierFactory | null>(
      store.get("ERC20BalanceTierFactory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get implementation(): Bytes {
    let value = this.get("implementation");
    return value!.toBytes();
  }

  set implementation(value: Bytes) {
    this.set("implementation", Value.fromBytes(value));
  }

  get childrenCount(): BigInt {
    let value = this.get("childrenCount");
    return value!.toBigInt();
  }

  set childrenCount(value: BigInt) {
    this.set("childrenCount", Value.fromBigInt(value));
  }

  get children(): Array<string> | null {
    let value = this.get("children");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set children(value: Array<string> | null) {
    if (!value) {
      this.unset("children");
    } else {
      this.set("children", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class ERC20BalanceTier extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC20BalanceTier entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20BalanceTier must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20BalanceTier", id.toString(), this);
    }
  }

  static load(id: string): ERC20BalanceTier | null {
    return changetype<ERC20BalanceTier | null>(
      store.get("ERC20BalanceTier", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value!.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get deployTimestamp(): BigInt {
    let value = this.get("deployTimestamp");
    return value!.toBigInt();
  }

  set deployTimestamp(value: BigInt) {
    this.set("deployTimestamp", Value.fromBigInt(value));
  }

  get deployBlock(): BigInt {
    let value = this.get("deployBlock");
    return value!.toBigInt();
  }

  set deployBlock(value: BigInt) {
    this.set("deployBlock", Value.fromBigInt(value));
  }

  get deployer(): Bytes {
    let value = this.get("deployer");
    return value!.toBytes();
  }

  set deployer(value: Bytes) {
    this.set("deployer", Value.fromBytes(value));
  }
}

export class ERC20TransferTierFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC20TransferTierFactory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20TransferTierFactory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20TransferTierFactory", id.toString(), this);
    }
  }

  static load(id: string): ERC20TransferTierFactory | null {
    return changetype<ERC20TransferTierFactory | null>(
      store.get("ERC20TransferTierFactory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get implementation(): Bytes {
    let value = this.get("implementation");
    return value!.toBytes();
  }

  set implementation(value: Bytes) {
    this.set("implementation", Value.fromBytes(value));
  }

  get childrenCount(): BigInt {
    let value = this.get("childrenCount");
    return value!.toBigInt();
  }

  set childrenCount(value: BigInt) {
    this.set("childrenCount", Value.fromBigInt(value));
  }

  get children(): Array<string> | null {
    let value = this.get("children");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set children(value: Array<string> | null) {
    if (!value) {
      this.unset("children");
    } else {
      this.set("children", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class ERC20TransferTier extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC20TransferTier entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20TransferTier must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20TransferTier", id.toString(), this);
    }
  }

  static load(id: string): ERC20TransferTier | null {
    return changetype<ERC20TransferTier | null>(
      store.get("ERC20TransferTier", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value!.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get deployTimestamp(): BigInt {
    let value = this.get("deployTimestamp");
    return value!.toBigInt();
  }

  set deployTimestamp(value: BigInt) {
    this.set("deployTimestamp", Value.fromBigInt(value));
  }

  get deployBlock(): BigInt {
    let value = this.get("deployBlock");
    return value!.toBigInt();
  }

  set deployBlock(value: BigInt) {
    this.set("deployBlock", Value.fromBigInt(value));
  }

  get deployer(): Bytes {
    let value = this.get("deployer");
    return value!.toBytes();
  }

  set deployer(value: Bytes) {
    this.set("deployer", Value.fromBytes(value));
  }
}

export class ERC721BalanceTierFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC721BalanceTierFactory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC721BalanceTierFactory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC721BalanceTierFactory", id.toString(), this);
    }
  }

  static load(id: string): ERC721BalanceTierFactory | null {
    return changetype<ERC721BalanceTierFactory | null>(
      store.get("ERC721BalanceTierFactory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get implementation(): Bytes {
    let value = this.get("implementation");
    return value!.toBytes();
  }

  set implementation(value: Bytes) {
    this.set("implementation", Value.fromBytes(value));
  }

  get childrenCount(): BigInt {
    let value = this.get("childrenCount");
    return value!.toBigInt();
  }

  set childrenCount(value: BigInt) {
    this.set("childrenCount", Value.fromBigInt(value));
  }

  get children(): Array<string> | null {
    let value = this.get("children");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set children(value: Array<string> | null) {
    if (!value) {
      this.unset("children");
    } else {
      this.set("children", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class ERC721BalanceTier extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC721BalanceTier entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC721BalanceTier must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC721BalanceTier", id.toString(), this);
    }
  }

  static load(id: string): ERC721BalanceTier | null {
    return changetype<ERC721BalanceTier | null>(
      store.get("ERC721BalanceTier", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value!.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get deployTimestamp(): BigInt {
    let value = this.get("deployTimestamp");
    return value!.toBigInt();
  }

  set deployTimestamp(value: BigInt) {
    this.set("deployTimestamp", Value.fromBigInt(value));
  }

  get deployBlock(): BigInt {
    let value = this.get("deployBlock");
    return value!.toBigInt();
  }

  set deployBlock(value: BigInt) {
    this.set("deployBlock", Value.fromBigInt(value));
  }

  get deployer(): Bytes {
    let value = this.get("deployer");
    return value!.toBytes();
  }

  set deployer(value: Bytes) {
    this.set("deployer", Value.fromBytes(value));
  }
}

export class CombineTierFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CombineTierFactory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CombineTierFactory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CombineTierFactory", id.toString(), this);
    }
  }

  static load(id: string): CombineTierFactory | null {
    return changetype<CombineTierFactory | null>(
      store.get("CombineTierFactory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get implementation(): Bytes {
    let value = this.get("implementation");
    return value!.toBytes();
  }

  set implementation(value: Bytes) {
    this.set("implementation", Value.fromBytes(value));
  }

  get childrenCount(): BigInt {
    let value = this.get("childrenCount");
    return value!.toBigInt();
  }

  set childrenCount(value: BigInt) {
    this.set("childrenCount", Value.fromBigInt(value));
  }

  get children(): Array<string> | null {
    let value = this.get("children");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set children(value: Array<string> | null) {
    if (!value) {
      this.unset("children");
    } else {
      this.set("children", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class CombineTier extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CombineTier entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CombineTier must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CombineTier", id.toString(), this);
    }
  }

  static load(id: string): CombineTier | null {
    return changetype<CombineTier | null>(store.get("CombineTier", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value!.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get deployTimestamp(): BigInt {
    let value = this.get("deployTimestamp");
    return value!.toBigInt();
  }

  set deployTimestamp(value: BigInt) {
    this.set("deployTimestamp", Value.fromBigInt(value));
  }

  get deployBlock(): BigInt {
    let value = this.get("deployBlock");
    return value!.toBigInt();
  }

  set deployBlock(value: BigInt) {
    this.set("deployBlock", Value.fromBigInt(value));
  }

  get deployer(): Bytes {
    let value = this.get("deployer");
    return value!.toBytes();
  }

  set deployer(value: Bytes) {
    this.set("deployer", Value.fromBytes(value));
  }
}
